{"name":"Julienbe.GitHub.io","tagline":"Memo","body":"# Union Find\r\n\r\n## Quick Find - Eager approach\r\n\r\nBegin with id[], if two given objects have the same id, they are connected\r\n\r\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 \r\n|---|---|---|---|---|---|---|---|---|---\r\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 \r\n\r\nunion(4, 3)\r\n\r\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 \r\n|---|---|---|---|---|---|---|---|---|---\r\n| 0 | 1 | 2 | 3 | **3** | 5 | 6 | 7 | 8 | 9 \r\n\r\nunion(3, 8)\r\n\r\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 \r\n|---|---|---|---|---|---|---|---|---|---\r\n| 0 | 1 | 2 | **8** | **8** | 5 | 6 | 7 | 8 | 9 \r\n\r\netc..\r\n\r\nSo there can ben a lot of changes. Checking if two elements are connected is very fast but building the array is very slow\r\n\r\n# Order of growth \r\n\r\n|   Order   |   Name     |Solvable in 1990s | Solvable in 2000s    |\r\n|-----------|------------|-----------|------------|\r\n|         1 |   Constant |    any    | any |\r\n|     log N | Logarithmic|any | any |\r\n|         N |     Linear |Hundreds of millions | billions |\r\n|   N log N |linearithmic| millions | hundreds of millions |\r\n|         N²|  quadratic | thousands | tens of thousands |\r\n|         N³|      cubic | thousand | thousands |\r\n|       2^N |exponential | 20s | 30s |\r\n\r\n# MySQL replication\r\n\r\nTo make sure that the replication doesn't collides, make sure that the auto increment offset in my.cnf is set to even on one site, and on odd on the other\r\n\r\n# HashSet\r\n\r\nDATA => Hash() => bucket\r\n\r\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 \r\n|---|---|---|---|---|---|---|---|---|---\r\n|d1 |d3 |   |   |d4 |   |   |   |   |   \r\n|d2 |   |   |   |d5 |   |   |   |   |   \r\n|   |   |   |   |d6 |   |   |   |   |   \r\n\r\nTime : Average : O(1), worst O(n)\r\n\r\nSpace : O(n)\r\n\r\n# Bloom filter\r\n\r\nA Bloom filter is a data structure designed to tell you, rapidly and **memory-efficiently**, whether an element is present in a set. \r\n\r\nIt looks like this :\r\n\r\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |...| m \r\n|---|---|---|---|---|---|---|---|---|---\r\n|   |   |   |   |   |   |   |   |   |   \r\n\r\n\r\nWhen you enter something in the set, it goes trough multiples **hash functions** and each of them produce turn a cell of the array on. So if you add multiples elements they might eventually end up turning on cells that are already turned on.\r\nYou'll want your hash functions to be evenly and randomly distributed\r\n\r\n### Example\r\n\r\n~~~~\r\n* Ant -> hash1() -> cell 1\r\n* Ant -> hash2() -> cell 5\r\n* Ant -> hash3() -> cell 9\r\n~~~~\r\n~~~~\r\n* MassEffect -> hash1() -> cell 0\r\n* MassEffect -> hash2() -> cell 4\r\n* MassEffect -> hash3() -> cell 8\r\n~~~~\r\n~~~~\r\n* Manjaro -> hash1() -> cell 1 (Already on)\r\n* Manjaro -> hash2() -> cell 4 (Already on)\r\n* Manjaro -> hash3() -> cell 9 (Already on)\r\n~~~~\r\n\r\n## Get\r\n\r\nThe element you're trying to get will go trough the same hash functions, this will tell you which cells to look for. If one of those is off, the element cannot be there. If all are on, there is a fairly good chance that it has already been added.\r\n\r\nYou may have **false positives** but **no false negative**. The error rate can be tuned by varying the lenght of the array and the number of hash functions\r\n\r\n## Notes\r\n\r\n* You can't remove an item from an hash function... 'cause the cells might have been turned on by other things too\r\n* The more saturated the array become, the more false positive you're going to get.\r\n* The bigger the array, the less probability of false positive\r\n* The approximate false positive rate can be calculated with this :\r\n\r\n## Tuning \r\n\r\nThe probability of false positive : **(1 - e<sup>-kn/m</sup>)<sup><sup>k</sup></sup>** \r\n\r\nOk this deserve some explanations :\r\n\r\n**n** is the number of expected member\r\n**k** is the number of hash functions\r\n**m** is the number of bits\r\n\r\n+ With an empty bit vector and a good hashing algorithm with an uniform distribution, the probability of a particular element ending up in a particular bit is just **1/m**\r\n\r\n**1/m**\r\n\r\n+ After inserting this element, the probability of a bit not being set is **1 - 1/m**\r\n\r\n**1 - 1/m**\r\n\r\n+ And this probability after performing **k** hash functions is **(1 - 1/m)<sup>***k***</sup>**\r\n\r\n**(1 - 1/m)<sup>***k***</sup>**\r\n\r\n+ If you insert **n** elements, the probability that this bit isn't set is **(1 - 1/m)<sup>k***.n***</sup>**\r\n\r\n**(1 - 1/m)<sup>k***.n***</sup>**\r\n\r\n+ On the opposite, the probability that is set is \r\n\r\n***1 -*** **(1 - 1/m)<sup>k***.n***</sup>**\r\n\r\n+ It turns, and I need to dig on that, that **(1 - 1/m)<sup>k.n</sup>** is roughly equivalent to **1 - e<sup>-kn/m</sup>**\r\n\r\n≈ **1 - e<sup>-kn/m</sup>**\r\n\r\n+ When we try to figure out the probability of false positive, we want to know the probability that all **k** bits are set to one by other elements\r\n\r\n+ So this probability, is the probability that a bit is set ^ the number of bits we will verify **(1 - e<sup>-kn/m</sup>)<sup><sup>***k***</sup></sup>** \r\n\r\n**(1 - e<sup>-kn/m</sup>)<sup><sup>***k***</sup></sup>** \r\n\r\n# XA\r\n\r\nThis is a **global transaction** that may span **multiple resources**. On the opposite, a non-XA transaction always involves only one resource. \r\n\r\nSo it involves *a coordinating transaction manager*, with one or more databases (or other resources, like JMS) all involved in a single global transaction. It coordinates all of this through a protocol called Two Phase Commit (2PC). This protocol also has to be supported by the individual resources. \r\n\r\n# This is not the GRUB you are looking for\r\n\r\n1. Download http://unetbootin.github.io/\r\n2. Select Super Grub Disk\r\n3. Boot on it, select the first option, \"GNU/Linux\".\r\n4. On the a menu titled \"GNU/Linux (Help)\": Select \"Fix Boot of GNU/Linux (GRUB)\". \r\n\r\n# Install MySQL on CentOS\r\n\r\n1. Install MySQL server and MySQL client : *yum install mysql-server mysql*\r\n2. Start the MySQL service : */etc/init.d/mysql start*\r\n3. Run MySQL secure installation : */usr/bin/mysql_secure_installation*\r\n4. Make sure MySQL auto-starts upon a reboot : *chkconfig mysqld on*\r\n\r\n# Useful commands\r\n\r\n+ df -h as in **D**isk **F**ree -**h**uman readable\r\n+ du -sh as in **D**isk **U**sage -**h**uman readable -**s**ummerize\r\n+ sort -h as in sort -**h**uman-numeric-sort\r\n\r\n# Maven\r\n\r\n+ run specific test : mvn **-Dtest=TestNameOrPattern** clean test\r\n\r\n# Mockito\r\n\r\n~~~~java\r\nimport static org.mockito.Mockito.*;\r\n\r\nMyClass c = mock(MyClass.class);\r\nwhen(o.method()).thenReturn(\"return\");\r\n~~~~\r\n","google":"UA-51057524-6","note":"Don't delete this file! It's used internally to help with page regeneration."}